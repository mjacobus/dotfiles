# vi: set ft=sh :

alias parcel='./node_modules/.bin/parcel'
alias webpack='./node_modules/.bin/webpack'
alias babel='./node_modules/.bin/babel'
alias emacs='emacs -nw'
alias gbb='git bisect bad'
alias gbg='git bisect good'
alias gbr='git bisect run'
alias gbr='git bisect start'
alias ghp='cd ~/Projects/github/github'
alias ghb='cd ~/Projects/github/github'
alias kp='kill-process-by-name'
alias vim='nvim'
alias nv='cd ~/.config/nvim/'
alias dfi='cd ~/.dotfiles'

alias tdbcreate='RAILS_ENV=test ./bin/rails db:create'
alias tdbmigrate='RAILS_ENV=test ./bin/rails db:migrate'
alias tdbrollback='RAILS_ENV=test ./bin/rails db:rollback'
alias tdbredo='RAILS_ENV=test ./bin/rails db:migrate:redo'
alias tdbreset='bin/rails db:environment:set RAILS_ENV=test; RAILS_ENV=test ./bin/rails db:drop db:create db:migrate'
alias tmigrate=tdbmigrate

alias dbcreate='RAILS_ENV=development ./bin/rails db:create'
alias dbmigrate='RAILS_ENV=development ./bin/rails db:migrate'
alias dbrollback='RAILS_ENV=development ./bin/rails db:rollback'
alias dbredo='RAILS_ENV=development ./bin/rails db:migrate:redo'
alias dbreset='bin/rails db:environment:set RAILS_ENV=development; RAILS_ENV=development ./bin/rails db:drop db:create db:migrate'
alias migrate=dbmigrate

is_installed() {
  type "$1" > /dev/null 2>&1
  return $?
}

function php-cs-fixer() {
  if [ -f ./vendor/bin/php-cs-fixer ]; then
    ./vendor/bin/php-cs-fixer $@
  else
    ~/.dotfiles/composer/vendor/bin/php-cs-fixer
  fi
}

function phpunit() {
  if [ -f ./vendor/bin/phpunit ]; then
    ./vendor/bin/php-cs-fixer $@
  else
    ~/.dotfiles/composer/vendor/bin/phpunit
  fi
}

function changedfiles() {
  local commit=$1
  git diff $commit --name-only | awk '{print $2}'
}

function addedfiles() {
  local commit=$1
  git diff $commit --name-only --diff-filter=A
}

function rspec() {
  if [ -f ./bin/rspec ]; then
    time ./bin/rspec $@
  elif [ -f ./bin/bundle ]; then
    time ./bin/bundle exec rspec $@
  else
    time bundle exec rspec $@
  fi
}

# function rubocop() {
#   if [ -f ./bin/rubocop ]; then
#     time ./bin/rubocop $@
#   elif [ -f ./bin/bundle ]; then
#     time ./bin/bundle exec rubocop $@
#   else
#     time rubocop
#   fi
# }

function gri() {
  local number=$1
  git rebase -i HEAD~$number
}

# Aliases.
alias l='ls -alF'
is_installed xdg-open && alias open='xdg-open'

alias dotfiles='cd ~/.dotfiles'

# git
alias gam='git commit --amend'
alias gc!='git commit --amend'
alias gc='git commit'
alias gca!='git commit -a --amend'
alias gca='git commit -a'
alias gcob='git checkout -b'
alias gdc='gd --cached'
alias gdc='git diff --cached'
alias gp='git push origin'
alias gl='git log'
is_installed current_branch && alias gp='git push origin `current_branch`'
alias gpu='git pull'
alias gs='git status -s'
alias gconf='vim ~/.gitconfig'
alias b=branch
alias retag='git tag -d before_rebase; git tag before_rebase; echo "created tag before_rebase"'

# capistrano
alias cpd='cap production deploy'
alias csd='cap staging deploy'


# php
alias phpunit='./vendor/bin/phpunit'
alias behat='./vendor/bin/behat'
alias phpmd='./vendor/bin/phpmd'
alias t='[[ -f tests/phpunit.xml && ! -f phpunit.xml ]] && phpunit -c tests/phpunit.xml || phpunit'

# ruby
alias carrasco='bundle exec carrasco'
alias cap='bundle exec cap'
alias rake='bundle exec rake'

# appears to be a plugin
unalias ag > /dev/null 2>&1
# alias ag=$(which ag)

# conditional alias
is_installed vim.gnome && alias vim=vim.gnome
is_installed mvim      && alias vim='mvim -v'
is_installed mvim      && alias gvim='mvim -v'
is_installed gvim      && alias vim='gvim -v'
is_installed gvim      && alias gvim='gvim -v'
# is_installed nvim      && alias vim=nvim

if [[ -f ~/.aliases_local ]]; then
  source ~/.aliases_local
fi

function gpr() {
  local branch=`current_branch`

  echo "-----------------------------------------------------------------------"
  echo "Pull rebase origin ${branch}"
  echo "-----------------------------------------------------------------------"

  git pull --rebase origin $branch
}

function gbcb() {
  local branch=`current_branch`
  local bkp=`current_branch`.bkp

  echo "-----------------------------------------------------------------------"
  echo "Backing up $branch with $bkp"
  echo "-----------------------------------------------------------------------"

  git branch $bkp $branch
}

function branch() {
  local branch=$@

  echo "-----------------------------------------------------------------------"
  echo "Git checkout $branch"
  echo "-----------------------------------------------------------------------"

  dev git_checkout_branch --branch="$branch"
}
