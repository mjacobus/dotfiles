global !p

def namespace(snip, path):
    import os
    namespace = pathToNamespace(path)
    if (len(namespace) == 0):
        return ''
    return namespace

def testedclass(snip, path):
    return path.split('/').pop().split('Test.php')[0]

def factory_product(snip, path):
    return path.split('/').pop().split('Factory.php')[0]

def testedclass_namespace(snip, path):
    ns = path.split('tests/').pop()
    ns = ns.split(testedclass(snip, path))[0]
    ns = ns.replace("/", "\\").strip("\\").replace("Test","")
    return ns

def pathToNamespace(path):
    import re
    path = path.replace('\\', '/')

    parts = []
    for part in path.split('/'):
        if re.match('^[A-Z]', part):
            parts.append(part)
        else:
            parts = []
    parts.pop()

    return '\\'.join(parts)

endglobal

snippet sup "PHPMD supress warning" !
@SuppressWarnings(PHPMD${1:.UnusedFormalParameter})
endsnippet

snippet = "Template echo" !
<?php echo ${1}; ?>
endsnippet

snippet interface "interface" !
<?php

namespace ${1:`!p snip.rv = namespace(snip, path)`};

interface ${2:`!p snip.rv = snip.basename`}
{
	${0}
}
endsnippet

snippet class "class" !
<?php

namespace ${1:`!p snip.rv = namespace(snip, path)`};

class ${2:`!p snip.rv = snip.basename`}
{
	${0}
}
endsnippet

snippet zf "Zend Factory" !
<?php

namespace ${1:`!p snip.rv = namespace(snip, path)`};

use Zend\ServiceManager\ServiceLocatorInterface;
use Zend\ServiceManager\FactoryInterface;

class ${2:`!p snip.rv = snip.basename`} implements FactoryInterface
{
	/**
	 * @return $3
	 */
	public function createService(ServiceLocatorInterface $serviceLocator)
	{
		$service = new ${3:`!p snip.rv = factory_product(snip, path)`}();

		return $service;
	}
}
endsnippet

snippet nfactory "Nurse Factory" !
<?php

namespace ${1:`!p snip.rv = namespace(snip, path)`};

use Nurse\Factory\FactoryInterface;
use Psr\Container\ContainerInterface;

class ${2:`!p snip.rv = snip.basename`} implements FactoryInterface
{
	/**
	 * @return $3
	 */
	public function createService(ContainerInterface $container)
	{
		$service = new ${3:`!p snip.rv = factory_product(snip, path)`}();

		return $service;
	}

	/**
	 * @return string
	 */
	public function getKey(): string
	{
		return ${3:`!p snip.rv = factory_product(snip, path)`}::class;
	}
}
endsnippet

snippet gct "GGS controller test" !
<?php

namespace ${3:`!p snip.rv = namespace(snip, path)`};

use Zend\Test\PHPUnit\Controller\AbstractHttpControllerTestCase;

class ${4:`!p snip.rv = snip.basename`} extends AbstractHttpControllerTestCase
{

	public function setUp()
	{
		$this->setApplicationConfig(
			include APPLICATION_PATH . '/config/application.config.php'
		);
		parent::setUp();
	}

	/**
	 * @test
	 */
	public function ${1:dosomething}()
	{
		${2://do something}
	}
}
endsnippet

snippet tclass "Test class" !
<?php

namespace ${1:`!p snip.rv = namespace(snip, path)`};

use ${2:${1/Test//}}\\${3:`!p snip.rv = testedclass(snip, path)`};
use PHPUnit\Framework\TestCase;
use Prophecy\Prophecy\ObjectProphecy;

class $3Test extends TestCase
{
	/**
	 * @var $3
	 */
	protected $service;

	/**
	 * @before
	 */
	public function initialize()
	{
		$this->service = new $3($0);
	}
}
endsnippet

snippet gi "GGS interface" !
<?php

namespace ${1:`!p snip.rv = namespace(snip, path)`};

/**
 * $1\\$2
 */
interface ${2:`!p snip.rv = snip.basename`}
{
	${0}
}
endsnippet

snippet gv "GGS var doc" !
/* @var ${1:Type} \$${2:foo} */
endsnippet

snippet ret "return" !
return ${1:$someValue};
endsnippet

snippet aio "AssertInstanceOf Equals" !
$this->assertInstanceOf(${1:ClassName}::class, ${2:\$this->service});
endsnippet

snippet tii "test implements interface" !
/**
 * @test
 */
public function implementsCorrectInterface()
{
	$this->assertInstanceOf(${1:ClassName}::class, ${2:\$this->service});
}
endsnippet

snippet gp "GGS Class property"
/**
 * @var ${3:array}
 */
${4:private} \$${1:foo} = ${2:[]};
endsnippet

snippet pro "protected function"
protected function ${1:doSomething}(${2})
{
	${3}
}
endsnippet

snippet pri "private function"
private function ${1:doSomething}(${2})
{
	${3}
}
endsnippet

snippet pub "public function"
public function ${1:doSomething}(${2}): ${3}
{
	${4}
}
endsnippet

snippet const "constructor"
public function __construct(${1})
{
	${2}
}
endsnippet

snippet spub "public static function"
public static function ${1:doSomething}(${2})
{
	${3}
}
endsnippet

snippet spro "protected static function"
protected static function ${1:doSomething}(${2})
{
	${3}
}
endsnippet

snippet spri "private static function"
private static function ${1:doSomething}(${2})
{
	${3}
}
endsnippet

snippet ipub "public interface function"
/**
 * ${3}
 */
public function ${1:doSomething}(${2});
endsnippet

snippet test "test method"
/**
 * @test
 */
public function ${1:doSomething}()
{
	${2}
}
endsnippet

snippet it "test method"
/**
 * @test
 */
public function ${1:doSomething}()
{
	${2}
}
endsnippet

snippet af "assert false"
$this->assertFalse(\$${1:variable});
endsnippet

snippet at "assert true"
$this->assertTrue(\$${1:variable});
endsnippet

snippet as "assert same"
$this->assertSame(${1:\$expected}, ${2:\$actual});
endsnippet

snippet ae "assert equals"
$this->assertEquals(${1:\$expected}, ${2:\$actual});
endsnippet
